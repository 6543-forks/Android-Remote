apply plugin: 'com.android.application'

dependencies {
    implementation 'com.android.support:support-v13:28.0.0'
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:recyclerview-v7:28.0.0'
    implementation 'com.google.protobuf:protobuf-java:3.4.0'
    implementation 'org.jmdns:jmdns:3.5.4'
    implementation 'com.twofortyfouram:android-plugin-api-for-locale:1.0.1'
    implementation 'com.afollestad.material-dialogs:core:0.9.6.0'
    implementation 'com.afollestad.material-dialogs:commons:0.9.6.0'
}

/*
 * Gets the version name from the latest Git tag
 */
def getVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--always', '--tags'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}
def getVersionCode = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-list', '--count', "HEAD"
        standardOutput = stdout
    }
    return Integer.valueOf(stdout.toString().trim())
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion '30.0.2'

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode getVersionCode()
        versionName getVersionName()
    }

    signingConfigs {
        release {
            // Signing code for buildbot
            def keyProperties = file("key.properties")
            if (keyProperties.exists()) {
                Properties props = new Properties()
                props.load(new FileInputStream(keyProperties))
                storeFile file(props['keystore'])
                storePassword props['keystore.password']
                keyAlias props['key.alias']
                keyPassword props['key.password']
            }

            // Signing code for manual signing
            //storeFile file(System.console().readLine("\n\$ Enter keystore path: "))
            //storePassword System.console().readPassword("\n\$ Enter keystore password: ").toString()
            //keyAlias System.console().readLine("\n\$ Enter key alias: ")
            //keyPassword System.console().readPassword("\n\$ Enter key password: ").toString()
        }
    }

    buildTypes {
        release {
            if (signingConfigs.release.keyAlias != null) {
                signingConfig signingConfigs.release
            }
            applicationVariants.all { variant ->
                variant.outputs.all { output ->
                    if (output.outputFile != null && output.outputFile.name.endsWith('.apk')) {
                        if (variant.name == "release")
                            outputFileName = "ClementineRemote-release-" +
                                    defaultConfig.versionName +
                                    ".apk"
                    }
                }
            }
        }
    }

    lintOptions {
        disable 'MissingQuantity'
    }
}

task generateProtocolBuffer(type: Exec) {
    commandLine 'protoc', '-I./', '--java_out=./src/main/java', './src/main/java/de/qspool/clementineremote/backend/pb/remotecontrolmessages.proto'
}
